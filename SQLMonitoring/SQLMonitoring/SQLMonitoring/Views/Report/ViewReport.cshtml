@model SQLMonitoring.Model.Report

@{
    ViewData["Title"] = "Pregled Izveštaja";
}

<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<!------ Include the above in your HEAD tag ---------->-

<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<link href="~/css/site.css" rel="stylesheet" />

<script type="text/javascript">
    $(document).ready(function () {
        $('#footer_id').empty()

        // Register tab functions
        //
        $('#basic_info_href').on('click', function () {
            generateBasicInformation();
        });

        $('#backup_info_href').on('click', function () {
            generateBackupInformation();
        });

        $('#wait_stats_href').on('click', function () {
            generateWaitStats();
        });

        $('#tempdb_info_href').on('click', function() {
            generateTempdbStats();
        });

        $('#query_stats_href').on('click', function() {
            generateQueryStats();
        });

        $('#blocking_stats_href').on('click', function() {
            generateBlockingStats();
        });

        $('#memory_stats_href').on('click', function () {
            generateMemoryStats();
        });

        $('#basic_resource_usage_href').on('click', function() {
            generateBasicResourceUsage();
        });

        $('#cpu_stats_href').on('click', function() {
            generateCpuStats();
        });

        $('#io_stats_href').on('click', function () {
            generateIOStats();
        })

        $('#common_problems_href').on('click', function () {
            generateCommonProblems();
        });

        generateBasicInformation();
    });

    function generateCommonProblems() {
        var targetUrl = '@Url.Action("GetCommonProblems", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (commonProblems) {
                document.getElementById("content").style.visibility = "hidden"

                var result = ""

                data = JSON.parse(commonProblems);

                // Log full
                //
                if (data.logFull.length > 0) {
                    logFullResult = "<div class='row' style='position: absolute; top: 40px; left: 50px; width: 1400px;'>" +
                        "<div class='panel panel-danger'>" +
                        "<div class='panel-heading'>" +
                        "<h7>Pun Log Fajl</h7>" +
                        "</div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'>Kada transakcioni log postane pun, baza prelazi u stanje iz kojeg se jedino može čitati, i sve promene nad bazom neće biti moguće dok se log fajl ne smanji." +
                        "Da odsečete i skratite log fajl - uzmite kopiju loga baze ukoliko ste u punom modelu oporavka, ili jednostavno izvršite komandu SHRINKFILE nad log fajlom da oslobodite prostor za nove podatke. </div>" + 
                        "<br/>" + 
                        "<div style='margin-left:20px; margin-right:20px;'> Databases with log getting near full during reported period: </div> " + 
                        "<br/>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>" +
                        "<thead>" +
                        "<tr>" +
                        "<th>Baza</th>" +
                        "<th>Slobodan Prostor na Logu u MB/th>" +
                        "</tr>" +
                        "</thead>"

                    for (var i = 0; i < data.logFull.length; i++) {
                        var res = data.logFull[i];
                        logFullResult += "<tr><td>" + res.DbName + "</td><td>" + res.FreeSpaceMb + "</td></tr>"
                    }

                    logFullResult += "</tbody></table></div></div>"
                    result += logFullResult
                }

                // Long transactions
                //
                if (data.longTranscations.length > 0) {
                    longTransactionsResult = "<div class='row' style='position: absolute; top: 350px; left: 50px; width: 1400px;'>" +
                        "<div class='panel panel-warning'>" +
                        "<div class='panel-heading'>" +
                        "<h7>Duge Transakcije</h7>" +
                        "</div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Kada ste u punom modelu oporavka, duge transakcije drže automatsko zaključavanje log fajla zaključanim i mogu lako dovesti do problema punog loga kada se baza prebacuje u stanje iz kojeg se jedino može čitati" +
                        "Pored ovoga, duge transakcije su glavni uzrok mrtvog blokiranja i blokiranih procesa u slučaju da duga transakcija drži neki od često korišćenih resursa. Da rešite problem, razmislite o ubijanju dugih transakcija. </div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Active transactions with duration greater than 5 hours </div> " +
                        "<br/>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>" +
                        "<thead>" +
                        "<tr>" +
                        "<th>Id Transakcije</th>" +
                        "<th>Ime Transakcije</th>" +
                        "<th>Trajanje u Minutima </th>" +
                        "<th>Stanje</th>"
                        "</tr>" +
                        "</thead>"

                    for (var i = 0; i < data.longTranscations.length; i++) {
                        var res = data.longTranscations[i];
                        longTransactionsResult += "<tr><td>" + res.TransactionId + "</td><td>" + res.TransactionName + "</td><td>" + res.Duration + "</td><td>" + res.State +"</td></tr>"
                    }

                    longTransactionsResult += "</tbody></table></div></div>"
                    result += longTransactionsResult
                }

                // Missing Backups
                //
                if (data.missingBackups.length > 0) {
                    missingBackupResult = "<div class='row' style='position: absolute; top: 680px; left: 50px; width: 1400px;'>" +
                        "<div class='panel panel-danger'>" +
                        "<div class='panel-heading'>" +
                        "<h7>Nedostajuće Kopije</h7>" +
                        "</div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Imati bazu podataka bez uzimanja redudantnih kopija može vrlo lako dovesti do gubitka podataka u slučaju nenamernog brisanja ili neželjene modifikacije podataka." +
                        "Da biste sprečili gubitak podataka, strogo je preporučeno redovno uzimanje redudantnih kopija </div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Baze podataka sa nedostajućim kopijama u zadnja 24 časa </div> " +
                        "<br/>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>" +
                        "<thead>" +
                        "<tr>" +
                        "<th>Ime Baze Podataka</th>" +
                        "<th>Broj sati od zadnje redudantne kopije</th>" +
                    "</tr>" +
                        "</thead>"

                    for (var i = 0; i < data.missingBackups.length; i++) {
                        var res = data.missingBackups[i];
                        missingBackupResult += "<tr><td>" + res.DbName + "</td><td>" + res.HoursSinceLastBackup + "</td></tr>"
                    }

                    missingBackupResult += "</tbody></table></div></div>"
                    result += missingBackupResult
                }

                // Missing Indexes
                //
                if (data.missingIndexes.length > 0) {
                    missingIndexesResult = "<div class='row' style='position: absolute; top: 1000px; left: 50px; width: 1400px;'>" +
                        "<div class='panel panel-warning'>" +
                        "<div class='panel-heading'>" +
                        "<h7>Nedostajući Indeksi</h7>" +
                        "</div>" +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Nedostajući indeksi mogu lako da dovedu do degradiranih performansi. U sledećoj tabeli možete naći listu preporuka za indekse na osnovu prethodne istorije izvršavanja upita </div > " +
                        "<br/>" +
                        "<div style='margin-left:20px; margin-right:20px;'> Baze Podataka sa nedostajućim indeksima </div> " +
                        "<br/>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>" +
                        "<thead>" +
                        "<tr>" +
                        "<th>Id Baze podataka</th>" +
                        "<th>Kolone Jednakosti</th>" +
                        "<th>Kolone Nejednakosti</th>" +
                        "</tr>" +
                        "</thead>"

                    for (var i = 0; i < data.missingIndexes.length; i++) {
                        var res = data.missingIndexes[i];
                        missingIndexesResult += "<tr><td>" + res.DatabaseId + "</td><td>" + res.EqualityColumns + "<td></td>" + res.InequalityColumns + "</td></tr>"
                    }

                    missingIndexesResult += "</tbody></table></div></div>"
                    result += missingIndexesResult
                }

                document.getElementById("content").innerHTML = result;
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function generateIOStats() {
        var targetUrl = '@Url.Action("GetIOStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (ioInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='top_queries_io' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='throughput' style='position:absolute; top:400px; left:50px; width: 1400px;'></div>" +
                    "<div id='iops' style='position:absolute; top:900px; left:50px; width: 1400px;'></div>" +
                    "<div id='latency' style='position:absolute; top:1360px; left:50px; width: 1400px;'></div>";

                data = JSON.parse(ioInfo);
                populateThroughput(data.throughput)
                populateIOPS(data.IOPS)
                populateLatency(data.latency)
                populateTopIOQueries(data.topQueries)
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateTopIOQueries(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Upiti sa najvećom potrošnjom Ulazno-Izlaznih operacija</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Id Plana</th>" +
            "<th>Ukupno Ulazno-Izlaznih Operacija</th>" +
            "<th>Ukupno Upisa</th>" +
            "<th>Ukupno Čitanja</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var plan = data[i];
            result += "<tr><td>" + plan.PlanId + "</td><td>" + plan.TotalIOs + "</td><td>" + plan.TotalReadIOs + "</td><td>" + plan.TotalWriteIOs + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        document.getElementById('top_queries_io').innerHTML = result;
    }

    function populateLatency(data) {
        var WriteLatency = new Array()
        var ReadLatency = new Array()

        for (var i = 0; i < data.length; i++) {
            WriteLatency.push({
                x: new Date(data[i].Date),
                y: data[i].WriteLatency
            });

            ReadLatency.push({
                x: new Date(data[i].Date),
                y: data[i].ReadLatency
            });
        }

        var chart = new CanvasJS.Chart("latency", {
            title: {
                text: "Kašnjenje Ulazno-Izlaznih zahteva"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "MS",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Kašnjenje Čitanja",
                showInLegend: true,
                markerSize: 0,
                dataPoints: ReadLatency
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Kašnjenje Upisa",
                showInLegend: true,
                markerSize: 0,
                dataPoints: WriteLatency
            }]
        });
        chart.render();
    }

    function populateIOPS(data) {
        var TotalIOPS = new Array()
        var WriteIOPS = new Array()
        var ReadIOPS = new Array()

        for (var i = 0; i < data.length; i++) {
            TotalIOPS.push({
                x: new Date(data[i].Date),
                y: data[i].TotalIOPS
            });

            WriteIOPS.push({
                x: new Date(data[i].Date),
                y: data[i].WriteIOPS
            });

            ReadIOPS.push({
                x: new Date(data[i].Date),
                y: data[i].ReadIOPS
            });
        }

        var chart = new CanvasJS.Chart("iops", {
            title: {
                text: "IOPS"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "IOPS",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Ulazno-Izlaznih Operacija u sekundi",
                showInLegend: true,
                markerSize: 0,
                dataPoints: TotalIOPS
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Izlazne operacije u sekundi",
                showInLegend: true,
                markerSize: 0,
                dataPoints: WriteIOPS
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Ulazne Operacije u sekundi",
                showInLegend: true,
                markerSize: 0,
                dataPoints: ReadIOPS
            }]
        });
        chart.render();
    }


    function populateThroughput(data) {
        var TotalTput = new Array()
        var WriteTput = new Array()
        var ReadTput = new Array()

        for (var i = 0; i < data.length; i++) {
            TotalTput.push({
                x: new Date(data[i].Date),
                y: data[i].TotalMBps
            });

            WriteTput.push({
                x: new Date(data[i].Date),
                y: data[i].WriteMBps
            });

            ReadTput.push({
                x: new Date(data[i].Date),
                y: data[i].ReadMBps
            });
        }

        var chart = new CanvasJS.Chart("throughput", {
            title: {
                text: "Propusni Opseg"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "MBps",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Ukupni Opseg",
                showInLegend: true,
                markerSize: 0,
                dataPoints: TotalTput
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Propusni Opseg Upisa",
                showInLegend: true,
                markerSize: 0,
                dataPoints: WriteTput
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Propusni Opseg Čitanja",
                showInLegend: true,
                markerSize: 0,
                dataPoints: ReadTput
            }]
        });
        chart.render();
    }

    function generateCpuStats() {
        var targetUrl = '@Url.Action("GetCPUStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (cpuInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='total_user_cpu' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='top_cpu_queries' style='position:absolute; top:490px; left:50px; width: 1400px;'></div>" +
                    "<div id='compile_exec_cpu' style='position:absolute; top:940px; left:50px; width: 1400px;'></div>" +
                    "<div id='top_workload_groups_cpu' style='position:absolute; top:1370px; left:50px; width: 1400px;'></div>";

                data = JSON.parse(cpuInfo);
                populateTotalCpuUsage(data.totalAndUserCpu)
                populateCompileAndExecCpu(data.compileAndExecStats)
                populateTopQueriesCpu(data.topQueriesByCPU)
                populateTopWorkloadGroups(data.topWorkloadGroups)
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateTopWorkloadGroups(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                y: queryStats.WorkloadGroupCPUTime,
                label: queryStats.WorkloadGroup
            })
        }

        var chart = new CanvasJS.Chart("top_workload_groups_cpu", {
            animationEnabled: true,
            title: {
                text: "Grupe sa najvećom CPU potrošnjom"
            },
            axisY: {
                title: "Procesorsko Vreme"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Ime Grupe",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateTopQueriesCpu(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                    y: queryStats.QueryExecTime,
                    label: queryStats.QueryHash
            })
        }

        var chart = new CanvasJS.Chart("top_cpu_queries", {
            animationEnabled: true,
            title: {
                text: "Upiti sa najvećom potrošnjom Procesora"
            },
            axisY: {
                title: "Procesorsko Vreme"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Heš Upita",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateCompileAndExecCpu(data) {
        var CompileCpu = new Array()
        var ExecCpu = new Array()

        for (var i = 0; i < data.length; i++) {
            CompileCpu.push({
                x: new Date(data[i].Date),
                y: data[i].CompileCPUTime
            });

            ExecCpu.push({
                x: new Date(data[i].Date),
                y: data[i].ExecCPUTime
            });
        }

        var chart = new CanvasJS.Chart("compile_exec_cpu", {
            title: {
                text: "Procesor Vreme Izvršavanja i Kompajliranja"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "CPU ms",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Procesorsko Vreme Kompajliranja",
                lineColor: "purple",
                showInLegend: true,
                markerSize: 0,
                dataPoints: CompileCpu
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Procesorsko Vreme Izvršavanja",
                lineColor: "yellow",
                showInLegend: true,
                markerSize: 0,
                dataPoints: ExecCpu
            }]
        });
        chart.render();
    }

    function populateTotalCpuUsage(data) {
        var TotalCpu = new Array()
        var UserCpu = new Array()

        for (var i = 0; i < data.length; i++) {
            TotalCpu.push({
                x: new Date(data[i].Date),
                y: data[i].CPUTotalTime
            });

            UserCpu.push({
                x: new Date(data[i].Date),
                y: data[i].CPUUserTime
            });
        }

        var chart = new CanvasJS.Chart("total_user_cpu", {
            title: {
                text: "Ukupno i Korisničko Procesorsko Vreme"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "CPU ms",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Ukupno Procesorsko Vreme",
                showInLegend: true,
                markerSize: 0,
                dataPoints: TotalCpu
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Korisničko Procesorsko Vreme",
                showInLegend: true,
                markerSize: 0,
                dataPoints: UserCpu
            }]
        });
        chart.render();
    }

    function generateBasicResourceUsage() {
        var targetUrl = '@Url.Action("GetBasicResourceUsage", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (brInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='cpu_usage_br' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='memory_usage_br' style='position:absolute; top:490px; left:50px; width: 1400px;'></div>" +
                    "<div id='network_usage_br' style='position:absolute; top:940px; left:50px; width: 1400px;'></div>" +
                    "<div id='batch_requests_br' style='position:absolute; top:1370px; left:50px; width: 1400px;'></div>" +
                    "<div id='user_conenctions' style='position:absolute; top:1710px; left:50px; width: 1400px;'></div>";

                data = JSON.parse(brInfo);
                populateCpuUsageChart(data.basicResourceUsage);
                populateMemoryUsageChart(data.basicResourceUsage);
                populateNetworkUsageChart(data.basicResourceUsage);
                populateBatchRequestsChart(data.basicResourceUsage);
                populateUserConnections(data.basicResourceUsage);
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateUserConnections(data) {
        var userConnections = new Array()

        for (var i = 0; i < data.length; i++) {
            userConnections.push({
                x: new Date(data[i].Date),
                y: data[i].UserConnections
            });
        }

        var chart = new CanvasJS.Chart("user_conenctions", {
            title: {
                text: "Aktivne Korisničke Konekcije"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Korisničke Konekcije",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Korisničke Konekcije",
                lineColor: "red",
                showInLegend: true,
                markerSize: 0,
                dataPoints: userConnections
            }]
        });
        chart.render();
    }

    function populateBatchRequestsChart(data) {
        var batchRequests = new Array()

        for (var i = 0; i < data.length; i++) {
            batchRequests.push({
                x: new Date(data[i].Date),
                y: data[i].BatchRequests
            });
        }

        var chart = new CanvasJS.Chart("batch_requests_br", {
            title: {
                text: "Prosek Paketnih Zahteva"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Paketni Zahtevi",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Broj Paketnih Zahteva",
                lineColor: "green",
                showInLegend: true,
                markerSize: 0,
                dataPoints: batchRequests
            }]
        });
        chart.render();
    }

    function populateNetworkUsageChart(data) {
        var networkUsage = new Array()

        for (var i = 0; i < data.length; i++) {
            networkUsage.push({
                x: new Date(data[i].Date),
                y: data[i].NetworkUsage
            });
        }

        var chart = new CanvasJS.Chart("network_usage_br", {
            title: {
                text: "Potrošnja Mrežnog Opsega"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Procenat",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Potrošnja Mrežnog Opsega",
                lineColor: "purple",
                showInLegend: true,
                markerSize: 0,
                dataPoints: networkUsage
            }]
        });
        chart.render();
    }

    function populateMemoryUsageChart(data) {
        var memoryUsage = new Array()

        for (var i = 0; i < data.length; i++) {
            memoryUsage.push({
                x: new Date(data[i].Date),
                y: data[i].MemoryUsage
            });
        }

        var chart = new CanvasJS.Chart("memory_usage_br", {
            title: {
                text: "Potrošnja Memorije"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Procenat",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Procenat Iskoršćenosti Memorije",
                lineColor: "blue",
                showInLegend: true,
                markerSize: 0,
                dataPoints: memoryUsage
            }]
        });
        chart.render();
    }

    function populateCpuUsageChart(data) {
        var cpuUsage = new Array()

        for (var i = 0; i < data.length; i++) {
            cpuUsage.push({
                x: new Date(data[i].Date),
                y: data[i].CpuUsage
            });
        }

        var chart = new CanvasJS.Chart("cpu_usage_br", {
            title: {
                text: "CPU potrošnja"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Procenat",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Procenat Iskorišćenosti Procesora",
                lineColor: "red",
                showInLegend: true,
                markerSize: 0,
                dataPoints: cpuUsage
            }]
        });
        chart.render();
    }

    function generateMemoryStats() {
       var targetUrl = '@Url.Action("GetMemoryStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (memoryInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='total_target_size' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='top_memory_clerks' style='position:absolute; top:470px; left:50px; width: 1400px;'></div>" +
                    "<div id='buffer_hit_rate' style='position:absolute; top:900px; left:50px; width: 1400px;'></div>" +
                    "<div id='page_life_expectancy' style='position:absolute; top:1400px; left:50px; width: 1400px;'></div>";

                data = JSON.parse(memoryInfo);
                populateTargetAndTotalSize(data.totalAndTargetMemory);
                populateMemoryClerks(data.memoryClerks)
                populateBufferHitRate(data.bhrAndPle)
                populatePageLifeExpectancy(data.bhrAndPle)
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateMemoryClerks(data) {
        var memoryClerks = new Array()
        var dict = {}

        for (var i = 0; i < data.length; i++) {
            var dataObj = data[i]
            if (!memoryClerks.includes(dataObj.MemoryClerk)) {
                memoryClerks.push(dataObj.MemoryClerk)
            }

            if (dict[dataObj.MemoryClerk]) {
                dict[dataObj.MemoryClerk].push({
                    y: dataObj.MemoryClerkSize,
                    x: new Date(dataObj.Date)
                })
            } else {
                dict[dataObj.MemoryClerk] = [{
                    y: dataObj.MemoryClerkSize,
                    x: new Date(dataObj.Date)
                }]
            }
        }

        var chart = new CanvasJS.Chart("top_memory_clerks", {
            title: {
                text: "Najkorišćeniji Memorijski Klerkovi"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Veličina MB",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: memoryClerks[0],
                showInLegend: true,
                markerSize: 0,
                dataPoints: dict[memoryClerks[0]]
            },
            {
                type: "line",
                axisYType: "secondary",
                name: memoryClerks[1],
                showInLegend: true,
                markerSize: 0,
                dataPoints: dict[memoryClerks[1]]
            },
            {
                type: "line",
                axisYType: "secondary",
                name: memoryClerks[1],
                showInLegend: true,
                markerSize: 0,
                dataPoints: dict[memoryClerks[2]]
            },
            {
                type: "line",
                axisYType: "secondary",
                name: memoryClerks[2],
                showInLegend: true,
                markerSize: 0,
                dataPoints: dict[memoryClerks[3]]
            }]
        });
        chart.render();
    }

    function populateTargetAndTotalSize(data) {
        var totalSizeValues = new Array()
        var targetSizeValues = new Array()

        for (var i = 0; i < data.length; i++) {
            totalSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].TotalMemory
            });

            targetSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].TargetMemory
            });
        }

        var chart = new CanvasJS.Chart("total_target_size", {
            title: {
                text: "Ukupna i Ciljana Memorija"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Veličina MB",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "bottom",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Ukupna Memorija",
                showInLegend: true,
                markerSize: 0,
                dataPoints: totalSizeValues
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Ciljana Memorija",
                showInLegend: true,
                markerSize: 0,
                dataPoints: targetSizeValues
            }]
        });
        chart.render();
    }

    function populateBufferHitRate(data) {
        var bufferHitRate = new Array()

        for (var i = 0; i < data.length; i++) {
            bufferHitRate.push({
                x: new Date(data[i].Date),
                y: data[i].BufferCacheHitRatio
            });
        }

        var chart = new CanvasJS.Chart("buffer_hit_rate", {
            title: {
                text: "Procenat Pogodaka u Bafer Kešu"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Procenat Pogodaka",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Pogodaka",
                showInLegend: true,
                markerSize: 0,
                dataPoints: bufferHitRate
            }]
        });
        chart.render();
    }

    function populatePageLifeExpectancy(data) {
        var pageLifeExpectancy = new Array()

        for (var i = 0; i < data.length; i++) {
            pageLifeExpectancy.push({
                x: new Date(data[i].Date),
                y: data[i].PageLifeExpectancy
            });
        }

        var chart = new CanvasJS.Chart("page_life_expectancy", {
            title: {
                text: "Očekivani Životni Vek Stranice"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Sekunde",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Očekivani životni vek stranice",
                showInLegend: true,
                markerSize: 0,
                dataPoints: pageLifeExpectancy
            }]
        });
        chart.render();
    }

    function generateBlockingStats() {
       var targetUrl = '@Url.Action("GetBlockingStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (blockingInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='long_transactions' class='container' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='deadlocks_through_time' style='position:absolute; top:350px; left:50px; width: 1400px;'></div>" +
                    "<div id='blocked_processes' style='position:absolute; top:800px; left:50px; width: 1400px;'></div>";

                data = JSON.parse(blockingInfo);
                longTransactions = populateLongTransactions(data.longTransactions);
                document.getElementById("long_transactions").innerHTML = longTransactions
                populateDeadlocksThroughTimeChart(data.deadlocksThroughTime)
                blockedProcesses = populateBlockedProcesses(data.blockedProcesses)
                document.getElementById("blocked_processes").innerHTML = blockedProcesses
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateBlockedProcesses(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Blokirani Procesi</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Id Procesa</th>" +
            "<th>Status</th>" +
            "<th>Vreme Čekanja</th>" +
            "<th>Resurs Čekanja</th>" +
            "<th>Id Baze</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var process = data[i];
            result += "<tr><td>" + process.ProcessId + "</td><td>" + process.Status + "</td><td>" + process.WaitTime + "</td><td>" + process.WaitResource + "</td><td>" + process.DatabaseId + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function populateDeadlocksThroughTimeChart(data) {
        var deadlocksValues = new Array()

        for (var i = 0; i < data.length; i++) {
            deadlocksValues.push({
                x: new Date(data[i].Date),
                y: data[i].TotalDeadlocks
            });
        }

        var chart = new CanvasJS.Chart("deadlocks_through_time", {
            title: {
                text: "Mrtva Čekanja Kroz Vreme"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Ukupno Mrtvih Čekanja",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Ukupno Mrtvih Čekanja",
                showInLegend: true,
                markerSize: 0,
                dataPoints: deadlocksValues
            }]
        });
        chart.render();
    }

    function populateLongTransactions(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Duge Transakcije</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Id Transakcije</th>" +
            "<th>Ime Transakcije</th>" +
            "<th>Početno Vreme</th>" +
            "<th>Trajanje u Minutima</th>" +
            "<th>Stanje Transakcije</th>" +
        "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var txn = data[i];
            result += "<tr><td>" + txn.TransactionId + "</td><td>" + txn.Name + "</td><td>" + txn.BeginTime + "</td><td>" + txn.DurationMin + "</td><td>" + txn.State + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function generateTempdbStats() {
        var targetUrl = '@Url.Action("GetTempdbStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (tempdbInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='tempdbfilelayout' class='container' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='tempdbsizethroughtime' style='position:absolute; top:550px; left:50px; width: 1400px;'></div>";
                data = JSON.parse(tempdbInfo);
                tempdbFileLayout = populateTempdbFileLayou(data.tempdbFileLayout);
                populateTempdbSizeThroughTimeChart(data.tempdbSizeThroughTime)
                document.getElementById("tempdbfilelayout").innerHTML = tempdbFileLayout
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }


    function populateTempdbSizeThroughTimeChart(data) {
        var dataSizeValues = new Array()
        var logSizeValues = new Array()

        for (var i = 0; i < data.length; i++) {
            dataSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].DataSizeMb
            });

            logSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].LogSizeMb
            });
        }

        var chart = new CanvasJS.Chart("tempdbsizethroughtime", {
            title: {
                text: "Tempdb Veličina Kroz Vreme"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Veličina MB",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Podaci MB",
                showInLegend: true,
                markerSize: 0,
                dataPoints: dataSizeValues
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Log MB",
                showInLegend: true,
                markerSize: 0,
                dataPoints: logSizeValues
            }]
        });
        chart.render();
    }

    function populateTempdbFileLayou(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Tempdb Struktura Fajlova</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Id Fajla</th>" +
            "<th>Ime Fajla</th>" +
            "<th>Lokacija Fajla</th>" +
            "<th>Tip Fajla</th>" +
            "<th>Veličina Fajla</th>" +
            "<th>Maksimalna Veličina Fajla</th>" +
            "<th>Rast</th>"
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var file = data[i];
            result += "<tr><td>" + file.FileId + "</td><td>" + file.FileName + "</td><td>"  + file.Location + "</td><td>" + file.FileType + "</td><td>" + file.FileSize + "</td><td>" + file.FileMaxSize + "</td><td>" + file.Growth + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function generateQueryStats(){
        var targetUrl = '@Url.Action("GetQueryStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (queryInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='topqueriescpu' class='container' style='position: absolute; top: 40px; left: 50px; width: 1000px;'></div>" +
                    "<div id='topqueriescpuchart' style='position:absolute; top:300px; left:50px; width: 1000px;'></div>" +
                    "<div id='topqueriesio' class='container' style='position: absolute; top: 770px; left: 50px; width: 1000px;'></div>" +
                    "<div id='topqueriesiochart' style='position:absolute; top:1070px; left:50px; width: 1000px;'></div>";;
                data = JSON.parse(queryInfo);
                cpuQueryStats = populateQueryCPUStats(data.queryCpuList);
                document.getElementById("topqueriescpu").innerHTML = cpuQueryStats
                populateQueryCpuStatsChart(data.queryCpuList);
                ioQueryStats = populateQueryIOStats(data.queryIOStatsList);
                document.getElementById("topqueriesio").innerHTML = ioQueryStats
                populateQueryIOStatsChart(data.queryIOStatsList);
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateQueryIOStatsChart(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                y: queryStats.TotalLogicalReads + queryStats.TotalLogicalWrites,
                label: queryStats.QueryHash
            })
        }

        var chart = new CanvasJS.Chart("topqueriesiochart", {
            animationEnabled: true,
            title: {
                text: "Upiti sa najvećom potrošnjom diska"
            },
            axisY: {
                title: "Ukupno Ulazno-Izlaznih Operacija"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Heš Upita",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateQueryCpuStatsChart(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                y: queryStats.TotalWorkerTime,
                label: queryStats.QueryHash
            })
        }

        var chart = new CanvasJS.Chart("topqueriescpuchart", {
            animationEnabled: true,
            title: {
                text: "Upiti sa najvećom potrošnjom procesora"
            },
            axisY: {
                title: "Ukupno procesorsko vreme u ms"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Heš Upita",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateQueryCPUStats(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Upiti sa najvećom potrošnjom procesora</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Heš Upita</th>" +
            "<th>Poslednje Vreme Izvršavanja</th>" +
            "<th>Broj Izvršavanja</th>" +
            "<th>Ukupno vreme radnih niti</th>" +
            "<th>Prosečno procesorsko vreme</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var query = data[i];
            result += "<tr><td>" + query.QueryHash + "</td><td>" + query.LastExecTime + "</td><td>" + query.ExecCount + "</td><td>" + query.TotalWorkerTime + "</td><td>" + query.AvgCpuTime + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function populateQueryIOStats(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Upiti sa najvećom potrošnjom diska</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Heš Upita</th>" +
            "<th>Poslednje Vreme Izvršavanja</th>" +
            "<th>Broj Izvršavanja</th>" +
            "<th>Ukupno Logičkih Čitanja</th>" +
            "<th>Ukupno Logičkih Upisa</th>" +
            "<th>Prosečan broj Ulazno/Izlaznih operacija</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var query = data[i];
            result += "<tr><td>" + query.QueryHash + "</td><td>" + query.LastExecTime + "</td><td>" + query.ExecCount + "</td><td>" + query.TotalLogicalWrites + "</td><td>" + query.TotalLogicalReads + "</td><td>" + query.AvgIOsPerExecution + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function generateWaitStats() {
        var targetUrl = '@Url.Action("GetWaitStatsData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (waitStats) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(waitStats);
                document.getElementById("content").innerHTML = "<div id='spinlock_stats' stlye='margin-top:100px;'></div><div id='wait_stats' style='margin-top:450px'></div>"
                populateSpinlockStats(data.spinlockList);
                populateWaitStats(data.waitList);
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateWaitStats(data) {
        var waits = new Array()
        var selectedColors = new Array()
        var dict = {}
        var colors = ['#6C3483', '#BA4A00', '#2E86C1']

        for (var i = 0; i < data.length; i++) {
            var dataObj = data[i]

            if (!waits.includes(dataObj.WaitType)) {
                waits.push(dataObj.WaitType)
                selectedColors.push(colors[waits.length - 1])
            }

            if (dict[dataObj.WaitType]) {
                dict[dataObj.WaitType].push({
                    y: dataObj.WaitTimeMs,
                    x: new Date(dataObj.Date)
                })
            } else {
                dict[dataObj.WaitType] = [{
                    y: dataObj.WaitTimeMs,
                    x: new Date(dataObj.Date)
                }]
            }
        }

        var dataList = []

        for (var i = 0; i < waits.length; i++) {
            var dataObject = {
                type: "stackedColumn",
                showInLegend: true,
                color: selectedColors[i],
                name: waits[i],
                dataPoints: dict[waits[i]]
            }

            dataList.push(dataObject);
        }

        var chart = new CanvasJS.Chart("wait_stats", {
            animationEnabled: true,
            title: {
                text: "Statistika Čekanja",
                fontColor: "#0E0E0E"
            },
            axisX: {
                interval: 1,
                intervalType: "hour"
            },
            axisY: {
                valueFormatString: "#0",
                gridColor: "#B6B1A8",
                tickColor: "#B6B1A8"
            },
            toolTip: {
                shared: true,
                content: toolTipContent
            },
            data: dataList
        });
        chart.render();
    }

    function populateSpinlockStats(data) {
        var spinlocks = new Array()
        var selectedColors = new Array()
        var dict = {}
        var colors = ['#F1C40F', '#2ECC71 ','#E74C3C']

        for (var i = 0; i < data.length; i++) {
            var dataObj = data[i]

            if (!spinlocks.includes(dataObj.Spinlock)) {
                spinlocks.push(dataObj.Spinlock)
                selectedColors.push(colors[spinlocks.length - 1])
            }

            if (dict[dataObj.Spinlock]) {
                dict[dataObj.Spinlock].push({
                    y: dataObj.Collisions,
                    x: new Date(dataObj.Date)
                })
            } else {
                dict[dataObj.Spinlock] = [{
                    y: dataObj.Collisions,
                    x: new Date(dataObj.Date)
                }]
            }
        }

        var dataList = []

        for (var i = 0; i < spinlocks.length; i++) {
            var dataObject = {
                type: "stackedColumn",
                showInLegend: true,
                color: selectedColors[i],
                name: spinlocks[i],
                dataPoints: dict[spinlocks[i]]
            }

            dataList.push(dataObject);
        }

        var chart = new CanvasJS.Chart("spinlock_stats", {
            animationEnabled: true,
            title: {
                text: "Spinlok Statistika",
                fontColor: "#0E0E0E"
            },
            axisX: {
                interval: 1,
                intervalType: "hour"
            },
            axisY: {
                valueFormatString: "#0",
                gridColor: "#B6B1A8",
                tickColor: "#B6B1A8"
            },
            toolTip: {
                shared: true,
                content: toolTipContent
            },
            data: dataList
        });
        chart.render();
    }

    function toolTipContent(e) {
        var str = "";
        var total = 0;
        var str2, str3;
        for (var i = 0; i < e.entries.length; i++) {
            var str1 = "<span style= \"color:" + e.entries[i].dataSeries.color + "\"> " + e.entries[i].dataSeries.name + "</span>: <strong>" + e.entries[i].dataPoint.y + "</strong><br/>";
            total = e.entries[i].dataPoint.y + total;
            str = str.concat(str1);
        }
        str2 = "<span style = \"color:DodgerBlue;\"><strong>" + (e.entries[0].dataPoint.x).getHours() + "</strong></span><br/>";
        total = Math.round(total * 100) / 100;
        str3 = "<span style = \"color:Tomato\">Ukupno:</span><strong> " + total + "</strong><br/>";
        return (str2.concat(str)).concat(str3);
    }

    function generateBackupInformation() {
        var targetUrl = '@Url.Action("GetBackupInformationData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (backupInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(backupInfo);
                lastBackups = populateLastBackups(data);
                restorablePoints = populateRestorablePoints(data);
                missingBackups = populateMissingBackups(data);
                var innerDataHtml = lastBackups + restorablePoints + missingBackups;
                document.getElementById("content").innerHTML = innerDataHtml
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function generateBasicInformation() {
        var targetUrl = '@Url.Action("GetBasicInformationData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (basicInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(basicInfo);
                serverInfoHTML = populateServerInfo(data);
                databaseList = populateDatabaseList(data);
                fileList = populateFileList(data);
                var innerDataHtml = serverInfoHTML + databaseList + fileList
                document.getElementById("content").innerHTML = innerDataHtml
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateLastBackups(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 40px; left: 50px; width: 1000px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Kopije uzete u zadnja 24 časa</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Baza podataka</th>" +
            "<th>Vreme od</th>" +
            "<th>Vreme do</th>" +
            "<th>Trajanje</th>" +
            "<th>Veličina</th>" +
            "<th>Tip</th>" +
            "<th>Lokacija kopije</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "0") {
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + backup.BackupStartTime + "</td><td>" + backup.BackupEndTime + "</td><td>" + backup.BackupDuration + "</td><td>" + backup.BackupSize + "</td><td>" + backup.BackupType + "</td><td>" + backup.BackupLocation + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateRestorablePoints(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 300px; left: 50px; width: 500px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Obnovljive tačke u vremenu</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Baza</th>" +
            "<th>Poslednja obnovljiva vremenska tačka</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "1") {
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + backup.LastRestorablePoint + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateMissingBackups(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 520px; left: 50px; width: 500px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Baze kojima nedostaje redudantna kopija u zadnja 24 časa</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Baza</th>" +
            "<th>Broj časova od zadnje kopije</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "2") {
                var hoursSinceLastBackup = backup.HoursSinceLastBackup == "9999" ? " Nema kopija za ovu bazu" : backup.HoursSinceLastBackup
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + hoursSinceLastBackup + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateServerInfo(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 40px; left: 50px; width: 600px;'> <div class='row'>" +
                    "<div class='panel panel-info'>" +
                       "<div class='panel-heading'>" +
                            "<h7>Osnovne informacije o serveru</h7>" +
                        "</div>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>";
        result += "<table class='table table-striped'>";
        result += "<tr><td><b>" + 'Ime Servera' + "<b/></td><td>" + basicInfo.ServerName + "</td></tr>"
        result += "<tr><td><b>" + 'Verzija' + "<b/></td><td>" + basicInfo.ServerVersion.substr(0, 63)+ "</td></tr>"
        result += "<tr><td><b>" + 'Edicija' + "<b/></td><td>" + basicInfo.Edition + "</td></tr>"
        result += "<tr><td><b>" + 'Broj Procesora' + "<b/></td><td>"  + basicInfo.ProcessorCount + "</td></tr>"
        result += "<tr><td><b>" + 'Memorija' + "<b/></td><td>"  + basicInfo.Memory + "</td></tr>"
        result += "<tr><td><b>" + 'Broj Radnika' + "<b/></td><td>"  + basicInfo.WorkerCount + "</td></tr>"
        result += "<tr><td><b>" + 'Nivo Kompatibilnosti' + "<b/></td><td>"  + basicInfo.CompatLevel + "</td></tr>"
        result += "<tr><td><b>" + 'Kolacija' + "<b/></td><td>"  + basicInfo.Collation + "</td></tr>"
        result += "<tr><td><b>" + 'Odnos Hiper niti' + "<b/></td><td>"  + basicInfo.HyperThreadRatio + "</td></tr>"
        result += "<tr><td><b>" + 'XTP uključen' + "<b/></td><td>" + basicInfo.IsXTPEnabled + "</td></tr>"
        result += "<tr><td><b>" + 'HADR uključen' + "<b/></td><td>"  + basicInfo.IsHADREnabled + "</td></tr>"
        result += "</table>";
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateDatabaseList(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 520px; left: 50px; width: 700px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Lista Baza</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
                "<thead>"+
                    "<tr>"+
		                "<th>Ime</th>"+
		                "<th>Stanje</th>"+
		                "<th>Model Oporavka</th>"+
		                "<th>Nivo Izolacije</th>"+
		                "<th>Enkripcija</th>"+
		                "<th>Veličina u Megabajtima</th>"+
		            "</tr>"+
		        "</thead>";
        for (var i = 0; i < basicInfo.Databases.length; i++) {
            var database = basicInfo.Databases[i];
            result += "<tr><td>" + database.Name + "</td><td>" + database.State + "</td><td>" + database.RecoveryModel + "</td><td>" + database.SnapshotIsolationLevel + "</td><td>" + database.IsEncrypted + "</td><td>" + database.DatabaseSize + "</td></tr>"
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateFileList(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 900px; left: 50px; width: 800px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Lista Fajlova</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Ime</th>" +
            "<th>Baza</th>" +
            "<th>Tip</th>"+
            "<th>Veličina</th>" +
            "<th>Maksimalna Veličina</th>" +
            "<th>Rast</th>" +
            "<th>Stanje</th>" +
            "<th>Lokacija</th>"
            "</tr>" +
            "</thead>";
        for (var i = 0; i < basicInfo.DatabaseFiles.length; i++) {
            var databaseFile = basicInfo.DatabaseFiles[i];
            result += "<tr><td>" + databaseFile.Name + "</td><td>" + databaseFile.Db.Name + "</td><td>" + databaseFile.Type + "</td><td>" + databaseFile.Size + "</td><td>" + databaseFile.MaxSize + "</td><td>" + databaseFile.AutoGrowth + "</td><td>" + databaseFile.State  + "</td><td>" + databaseFile.Location + "</td></tr>"
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }
</script>


<div class="panel panel-warning" style="position:absolute;top:100px;left:13%;width:400px;">
    <div class="panel-heading">
        <h7 class="panel-title">Informacije o izveštaju</h7>
    </div>
    <div class="panel-body">
        <b> Ime Servera </b> - @Model.Server.ServerName
        <br/>
        <b> Kreirao </b> - @Model.User.Email
        <br/>
        <b> Kreirano u </b> - @Model.CreationTime
    </div>
</div>


    <div id="navigationbar" style="position:absolute;top:250px;left:200px;width:1500px;">
        <nav class="navbar navbar-expand-lg navbar-light bg-light" sstyle="background-color:#e0e0e0;background:#e0e0e0;">
            <div class="collapse navbar-collapse" id="navcol-1">
                <ul class="nav navbar-nav flex-grow-1 justify-content-between">
                    <li class="nav-item" role="presentation"><a class="nav-link" id="basic_info_href" href="#">Osnovne informacije</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="basic_resource_usage_href" href="#">Potrošnja osnovnih resursa</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="cpu_stats_href" href="#">CPU </a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="memory_stats_href" href="#">Memorija</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="io_stats_href" href="#">IO </a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="query_stats_href" href="#">Upiti</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="wait_stats_href" href="#">Statistika Čekanja</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="blocking_stats_href" href="#">Blokiranje</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="backup_info_href" href="#">Rezervne Kopije</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="tempdb_info_href" href="#">TempDB Performanse</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="common_problems_href" href="#">Učestali Problemi</a></li>
                </ul>
            </div>
        </nav>
    </div>

    <div id="content" class="overflow-scroll" style="position:absolute;top:300px;left:200px;width:1500px;height:500px;">
    </div>
