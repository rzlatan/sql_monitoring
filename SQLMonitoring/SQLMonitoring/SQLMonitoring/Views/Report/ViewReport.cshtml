@model SQLMonitoring.Model.Report

@{
    ViewData["Title"] = "Report";
}

<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<!------ Include the above in your HEAD tag ---------->-

<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<link href="~/css/site.css" rel="stylesheet" />

<script type="text/javascript">
    $(document).ready(function () {
        $('#footer_id').empty()

        // Register tab functions
        //
        $('#basic_info_href').on('click', function () {
            generateBasicInformation();
        });

        $('#backup_info_href').on('click', function () {
            generateBackupInformation();
        });

        $('#wait_stats_href').on('click', function () {
            generateWaitStats();
        });

        $('#tempdb_info_href').on('click', function() {
            generateTempdbStats();
        });

        $('#query_stats_href').on('click', function() {
            generateQueryStats();
        });

        generateBasicInformation();
    });

    function generateTempdbStats() {
        var targetUrl = '@Url.Action("GetTempdbStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (tempdbInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='tempdbfilelayout' class='container' style='position: absolute; top: 40px; left: 50px; width: 1400px;'></div>" +
                    "<div id='tempdbsizethroughtime' style='position:absolute; top:550px; left:50px; width: 1400px;'></div>";
                data = JSON.parse(tempdbInfo);
                tempdbFileLayout = populateTempdbFileLayou(data.tempdbFileLayout);
                populateTempdbSizeThroughTimeChart(data.tempdbSizeThroughTime)
                document.getElementById("tempdbfilelayout").innerHTML = tempdbFileLayout
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }


    function populateTempdbSizeThroughTimeChart(data) {
        var dataSizeValues = new Array()
        var logSizeValues = new Array()

        for (var i = 0; i < data.length; i++) {
            dataSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].DataSizeMb
            });

            logSizeValues.push({
                x: new Date(data[i].Date),
                y: data[i].LogSizeMb
            });
        }

        var chart = new CanvasJS.Chart("tempdbsizethroughtime", {
            title: {
                text: "Tempdb Size Through Time"
            },
            axisX: {
                valueFormatString: "HH:mm"
            },
            axisY2: {
                title: "Size MB",
            },
            toolTip: {
                shared: true
            },
            legend: {
                cursor: "pointer",
                verticalAlign: "top",
                horizontalAlign: "center",
                dockInsidePlotArea: true,
            },
            data: [{
                type: "line",
                axisYType: "secondary",
                name: "Data MB",
                showInLegend: true,
                markerSize: 0,
                dataPoints: dataSizeValues
            },
            {
                type: "line",
                axisYType: "secondary",
                name: "Log MB",
                showInLegend: true,
                markerSize: 0,
                dataPoints: logSizeValues
            }]
        });
        chart.render();
    }

    function populateTempdbFileLayou(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Tempdb File Layout</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>File Id</th>" +
            "<th>File Name</th>" +
            "<th>File Location</th>" +
            "<th>File Type</th>" +
            "<th>File Size</th>" +
            "<th>Max File Size </th>" +
            "<th>Growth</th>"
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var file = data[i];
            result += "<tr><td>" + file.FileId + "</td><td>" + file.FileName + "</td><td>"  + file.Location + "</td><td>" + file.FileType + "</td><td>" + file.FileSize + "</td><td>" + file.FileMaxSize + "</td><td>" + file.Growth + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function generateQueryStats(){
        var targetUrl = '@Url.Action("GetQueryStats", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (queryInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = "<div id='topqueriescpu' class='container' style='position: absolute; top: 40px; left: 50px; width: 1000px;'></div>" +
                    "<div id='topqueriescpuchart' style='position:absolute; top:300px; left:50px; width: 1000px;'></div>" +
                    "<div id='topqueriesio' class='container' style='position: absolute; top: 770px; left: 50px; width: 1000px;'></div>" +
                    "<div id='topqueriesiochart' style='position:absolute; top:1070px; left:50px; width: 1000px;'></div>";;
                data = JSON.parse(queryInfo);
                cpuQueryStats = populateQueryCPUStats(data.queryCpuList);
                document.getElementById("topqueriescpu").innerHTML = cpuQueryStats
                populateQueryCpuStatsChart(data.queryCpuList);
                ioQueryStats = populateQueryIOStats(data.queryIOStatsList);
                document.getElementById("topqueriesio").innerHTML = ioQueryStats
                populateQueryIOStatsChart(data.queryIOStatsList);
                document.getElementById("content").style.visibility = "visible"
                },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateQueryIOStatsChart(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                y: queryStats.TotalLogicalReads + queryStats.TotalLogicalWrites,
                label: queryStats.QueryHash
            })
        }

        var chart = new CanvasJS.Chart("topqueriesiochart", {
            animationEnabled: true,
            title: {
                text: "Top queries by total IO operations"
            },
            axisY: {
                title: "Total IO"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Query Hash",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateQueryCpuStatsChart(data) {
        var dataArray = new Array()

        for (var i = 0; i < data.length; i++) {
            var queryStats = data[i];
            dataArray.push({
                y: queryStats.TotalWorkerTime,
                label: queryStats.QueryHash
            })
        }

        var chart = new CanvasJS.Chart("topqueriescpuchart", {
            animationEnabled: true,
            title: {
                text: "Top queries by total CPU time"
            },
            axisY: {
                title: "Total CPU time in ms"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Query Hash",
                dataPoints: dataArray
            }]
        });
        chart.render();
    }

    function populateQueryCPUStats(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Top Queries by CPU usage</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Query Hash</th>" +
            "<th>Last Execution Time</th>" +
            "<th>Execution Count</th>" +
            "<th>Total Worker Time</th>" +
            "<th>Average CPU Time</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var query = data[i];
            result += "<tr><td>" + query.QueryHash + "</td><td>" + query.LastExecTime + "</td><td>" + query.ExecCount + "</td><td>" + query.TotalWorkerTime + "</td><td>" + query.AvgCpuTime + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function populateQueryIOStats(data) {
        result = "<div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Top Queries by IO Usage</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Query Hash</th>" +
            "<th>Last Execution Time</th>" +
            "<th>Execution Count</th>" +
            "<th>Total Logical Reads</th>" +
            "<th>Total Logical Writes</th>" +
            "<th>Average IOs Per Execution</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < data.length; i++) {
            var query = data[i];
            result += "<tr><td>" + query.QueryHash + "</td><td>" + query.LastExecTime + "</td><td>" + query.ExecCount + "</td><td>" + query.TotalLogicalWrites + "</td><td>" + query.TotalLogicalReads + "</td><td>" + query.AvgIOsPerExecution + "</td></tr>"
        }
        result += "</tbody></table></div></div>"
        return result;
    }

    function generateWaitStats() {
        var targetUrl = '@Url.Action("GetWaitStatsData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (waitStats) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(waitStats);
                document.getElementById("content").innerHTML = "<div id='spinlock_stats' stlye='margin-top:100px;'></div><div id='wait_stats' style='margin-top:450px'></div>"
                populateSpinlockStats(data.spinlockList);
                populateWaitStats(data.waitList);
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateWaitStats(data) {
        var waits = new Array()
        var selectedColors = new Array()
        var dict = {}
        var colors = ['#6C3483', '#BA4A00', '#2E86C1']

        for (var i = 0; i < data.length; i++) {
            var dataObj = data[i]

            if (!waits.includes(dataObj.WaitType)) {
                waits.push(dataObj.WaitType)
                selectedColors.push(colors[waits.length - 1])
            }

            if (dict[dataObj.WaitType]) {
                dict[dataObj.WaitType].push({
                    y: dataObj.WaitTimeMs,
                    x: new Date(dataObj.Date)
                })
            } else {
                dict[dataObj.WaitType] = [{
                    y: dataObj.WaitTimeMs,
                    x: new Date(dataObj.Date)
                }]
            }
        }

        var dataList = []

        for (var i = 0; i < waits.length; i++) {
            var dataObject = {
                type: "stackedColumn",
                showInLegend: true,
                color: selectedColors[i],
                name: waits[i],
                dataPoints: dict[waits[i]]
            }

            dataList.push(dataObject);
        }

        var chart = new CanvasJS.Chart("wait_stats", {
            animationEnabled: true,
            title: {
                text: "Wait Stats",
                fontColor: "#0E0E0E"
            },
            axisX: {
                interval: 1,
                intervalType: "hour"
            },
            axisY: {
                valueFormatString: "#0",
                gridColor: "#B6B1A8",
                tickColor: "#B6B1A8"
            },
            toolTip: {
                shared: true,
                content: toolTipContent
            },
            data: dataList
        });
        chart.render();
    }

    function populateSpinlockStats(data) {
        var spinlocks = new Array()
        var selectedColors = new Array()
        var dict = {}
        var colors = ['#F1C40F', '#2ECC71 ','#E74C3C']

        for (var i = 0; i < data.length; i++) {
            var dataObj = data[i]

            if (!spinlocks.includes(dataObj.Spinlock)) {
                spinlocks.push(dataObj.Spinlock)
                selectedColors.push(colors[spinlocks.length - 1])
            }

            if (dict[dataObj.Spinlock]) {
                dict[dataObj.Spinlock].push({
                    y: dataObj.Collisions,
                    x: new Date(dataObj.Date)
                })
            } else {
                dict[dataObj.Spinlock] = [{
                    y: dataObj.Collisions,
                    x: new Date(dataObj.Date)
                }]
            }
        }

        var dataList = []

        for (var i = 0; i < spinlocks.length; i++) {
            var dataObject = {
                type: "stackedColumn",
                showInLegend: true,
                color: selectedColors[i],
                name: spinlocks[i],
                dataPoints: dict[spinlocks[i]]
            }

            dataList.push(dataObject);
        }

        var chart = new CanvasJS.Chart("spinlock_stats", {
            animationEnabled: true,
            title: {
                text: "Spinlock Stats",
                fontColor: "#0E0E0E"
            },
            axisX: {
                interval: 1,
                intervalType: "hour"
            },
            axisY: {
                valueFormatString: "#0",
                gridColor: "#B6B1A8",
                tickColor: "#B6B1A8"
            },
            toolTip: {
                shared: true,
                content: toolTipContent
            },
            data: dataList
        });
        chart.render();
    }

    function toolTipContent(e) {
        var str = "";
        var total = 0;
        var str2, str3;
        for (var i = 0; i < e.entries.length; i++) {
            var str1 = "<span style= \"color:" + e.entries[i].dataSeries.color + "\"> " + e.entries[i].dataSeries.name + "</span>: <strong>" + e.entries[i].dataPoint.y + "</strong><br/>";
            total = e.entries[i].dataPoint.y + total;
            str = str.concat(str1);
        }
        str2 = "<span style = \"color:DodgerBlue;\"><strong>" + (e.entries[0].dataPoint.x).getHours() + "</strong></span><br/>";
        total = Math.round(total * 100) / 100;
        str3 = "<span style = \"color:Tomato\">Total:</span><strong> " + total + "</strong><br/>";
        return (str2.concat(str)).concat(str3);
    }

    function generateBackupInformation() {
        var targetUrl = '@Url.Action("GetBackupInformationData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (backupInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(backupInfo);
                lastBackups = populateLastBackups(data);
                restorablePoints = populateRestorablePoints(data);
                missingBackups = populateMissingBackups(data);
                var innerDataHtml = lastBackups + restorablePoints + missingBackups;
                document.getElementById("content").innerHTML = innerDataHtml
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function generateBasicInformation() {
        var targetUrl = '@Url.Action("GetBasicInformationData", "Report")?reportId=' + @Model.Id;

        $.ajax({
            type: "GET",
            url: targetUrl,
            contentType: "application/json",
            success: function (basicInfo) {
                document.getElementById("content").style.visibility = "hidden"
                document.getElementById("content").innerHTML = ""
                data = JSON.parse(basicInfo);
                serverInfoHTML = populateServerInfo(data);
                databaseList = populateDatabaseList(data);
                fileList = populateFileList(data);
                var innerDataHtml = serverInfoHTML + databaseList + fileList
                document.getElementById("content").innerHTML = innerDataHtml
                document.getElementById("content").style.visibility = "visible"
            },

            error: function (e) {
                alert("Failed to retrieve data for report");
            }
        });
    }

    function populateLastBackups(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 40px; left: 50px; width: 1000px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Backups in the last 24 hours</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Database Name</th>" +
            "<th>Start Time</th>" +
            "<th>End Time</th>" +
            "<th>Duration</th>" +
            "<th>Backup Size</th>" +
            "<th>Backup Type</th>" +
            "<th>Backup Location</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "0") {
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + backup.BackupStartTime + "</td><td>" + backup.BackupEndTime + "</td><td>" + backup.BackupDuration + "</td><td>" + backup.BackupSize + "</td><td>" + backup.BackupType + "</td><td>" + backup.BackupLocation + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateRestorablePoints(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 300px; left: 50px; width: 500px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Last Restorable Points In Time</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Database Name</th>" +
            "<th>Last Restorable Point</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "1") {
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + backup.LastRestorablePoint + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateMissingBackups(backupInfo) {
        result = "<div class='container' style='position: absolute; top: 520px; left: 50px; width: 500px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Databases Missing Backup During Last 24 Hours</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Database Name</th>" +
            "<th>Hours Since Last Backup</th>" +
            "</tr>" +
            "</thead>";
        for (var i = 0; i < backupInfo.length; i++) {
            var backup = backupInfo[i];
            if (backup.Type == "2") {
                var hoursSinceLastBackup = backup.HoursSinceLastBackup == "9999" ? " No backups for this database" : backup.HoursSinceLastBackup
                result += "<tr><td>" + backup.DatabaseName + "</td><td>" + hoursSinceLastBackup + "</td></tr>"
            }
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateServerInfo(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 40px; left: 50px; width: 600px;'> <div class='row'>" +
                    "<div class='panel panel-info'>" +
                       "<div class='panel-heading'>" +
                            "<h7>Basic Server Information</h7>" +
                        "</div>" +
                        "<table class='table table-striped table-hover'>" +
                        "<tbody>";
        result += "<table class='table table-striped'>";
        result += "<tr><td><b>" + 'Server Name' + "<b/></td><td>" + basicInfo.ServerName + "</td></tr>"
        result += "<tr><td><b>" + 'Server Version' + "<b/></td><td>" + basicInfo.ServerVersion.substr(0, 63)+ "</td></tr>"
        result += "<tr><td><b>" + 'Edition' + "<b/></td><td>" + basicInfo.Edition + "</td></tr>"
        result += "<tr><td><b>" + 'Processor Count' + "<b/></td><td>"  + basicInfo.ProcessorCount + "</td></tr>"
        result += "<tr><td><b>" + 'Memory' + "<b/></td><td>"  + basicInfo.Memory + "</td></tr>"
        result += "<tr><td><b>" + 'Worker Count' + "<b/></td><td>"  + basicInfo.WorkerCount + "</td></tr>"
        result += "<tr><td><b>" + 'Compat Level' + "<b/></td><td>"  + basicInfo.CompatLevel + "</td></tr>"
        result += "<tr><td><b>" + 'Collation' + "<b/></td><td>"  + basicInfo.Collation + "</td></tr>"
        result += "<tr><td><b>" + 'HyperThread Ratio' + "<b/></td><td>"  + basicInfo.HyperThreadRatio + "</td></tr>"
        result += "<tr><td><b>" + 'XTP Enabled' + "<b/></td><td>" + basicInfo.IsXTPEnabled + "</td></tr>"
        result += "<tr><td><b>" + 'HADR Enabled' + "<b/></td><td>"  + basicInfo.IsHADREnabled + "</td></tr>"
        result += "</table>";
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateDatabaseList(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 520px; left: 50px; width: 700px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Database List</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
                "<thead>"+
                    "<tr>"+
		                "<th>Name</th>"+
		                "<th>State</th>"+
		                "<th>Recovery Model</th>"+
		                "<th>Snapshot Isolation</th>"+
		                "<th>Encryption</th>"+
		                "<th>Size Megabytes</th>"+
		            "</tr>"+
		        "</thead>";
        for (var i = 0; i < basicInfo.Databases.length; i++) {
            var database = basicInfo.Databases[i];
            result += "<tr><td>" + database.Name + "</td><td>" + database.State + "</td><td>" + database.RecoveryModel + "</td><td>" + database.SnapshotIsolationLevel + "</td><td>" + database.IsEncrypted + "</td><td>" + database.DatabaseSize + "</td></tr>"
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }

    function populateFileList(basicInfo) {
        result = "<div class='container' style='position: absolute; top: 900px; left: 50px; width: 800px;'> <div class='row'>" +
            "<div class='panel panel-info'>" +
            "<div class='panel-heading'>" +
            "<h7>Database List</h7>" +
            "</div>" +
            "<table class='table table-striped table-hover'>" +
            "<tbody>" +
            "<thead>" +
            "<tr>" +
            "<th>Name</th>" +
            "<th>Database</th>" +
            "<th>Type</th>"+
            "<th>Size</th>" +
            "<th>Max Size</th>" +
            "<th>Growth</th>" +
            "<th>State</th>" +
            "<th>Location</th>"
            "</tr>" +
            "</thead>";
        for (var i = 0; i < basicInfo.DatabaseFiles.length; i++) {
            var databaseFile = basicInfo.DatabaseFiles[i];
            result += "<tr><td>" + databaseFile.Name + "</td><td>" + databaseFile.Db.Name + "</td><td>" + databaseFile.Type + "</td><td>" + databaseFile.Size + "</td><td>" + databaseFile.MaxSize + "</td><td>" + databaseFile.AutoGrowth + "</td><td>" + databaseFile.State  + "</td><td>" + databaseFile.Location + "</td></tr>"
        }
        result += "</tbody></table></div></div></div>"
        return result;
    }
</script>


<div class="panel panel-warning" style="position:absolute;top:100px;left:13%;width:400px;">
    <div class="panel-heading">
        <h7 class="panel-title">Report Information</h7>
    </div>
    <div class="panel-body">
        <b> Server Name </b> - @Model.Server.ServerName
        <br/>
        <b> Created By </b> - @Model.User.Email
        <br/>
        <b> Created At </b> - @Model.CreationTime
    </div>
</div>


    <div id="navigationbar" style="position:absolute;top:250px;left:200px;width:1500px;">
        <nav class="navbar navbar-expand-lg navbar-light bg-light" sstyle="background-color:#e0e0e0;background:#e0e0e0;">
            <div class="collapse navbar-collapse" id="navcol-1">
                <ul class="nav navbar-nav flex-grow-1 justify-content-between">
                    <li class="nav-item" role="presentation"><a class="nav-link" id="basic_info_href" href="#">Basic Information</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">Basic Resource Usage</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">CPU Details</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">Memory Details</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">IO Details</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="query_stats_href" href="#">Query Stats</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="wait_stats_href" href="#">Wait Stats</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">Blocking and Deadlocks</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="backup_info_href" href="#">Backups</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" id="tempdb_info_href" href="#">TempDB Performance</a></li>
                    <li class="nav-item" role="presentation"><a class="nav-link" href="#">Common Problems</a></li>
                </ul>
            </div>
        </nav>
    </div>

    <div id="content" class="overflow-scroll" style="position:absolute;top:300px;left:200px;width:1500px;height:500px;">
    </div>
